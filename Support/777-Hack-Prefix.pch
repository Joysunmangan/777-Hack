#import <Availability.h>

#ifndef __IPHONE_5_0
#warning "This project uses features only available in iOS SDK 5.0 and later."
#endif

#ifdef __OBJC__
  #import <UIKit/UIKit.h>
  #import <Foundation/Foundation.h>
  #import <SpriteKit/SpriteKit.h>
  #import <Funcussion/NSArray+Funcussion.h>
  #import <Funcussion/NSDictionary+Funcussion.h>
#endif

// sprite categories

static const uint32_t heroCategory       = 0x1 << 0;
static const uint32_t nodeCategory       = 0x1 << 1;
static const uint32_t monsterCategory    = 0x1 << 2;
static const uint32_t projectileCategory = 0x1 << 3;

// Game constants

static const NSUInteger gridSegments = 6;
static const CGFloat gridSegmentLength = 128.f;
static const CGFloat gridSegmentCenter = gridSegmentLength / 2.f;
static const CGFloat gridLength = gridSegmentLength * gridSegments;


static inline CGSize nodeSize() {
  return CGSizeMake(90,90);
}

typedef struct {
  NSUInteger row;
  NSUInteger col;
} Sector;

static inline NSUInteger randomBetween(NSUInteger min, NSUInteger max) {
  return min + arc4random() % (max - min);
}

static inline Sector SectorMake(NSUInteger row, NSUInteger col) {
  return (Sector) {row, col};
}

static inline NSUInteger sectorToCoordinate(NSUInteger sectorSegment) {
  return sectorSegment * gridSegmentLength + gridSegmentCenter;
}

static inline NSUInteger coordinateToSector(NSUInteger coordinate) {
  return coordinate / gridSegmentLength;
}

static inline BOOL SectorEqualToSector(Sector sector1, Sector sector2) {
  return sector1.col == sector2.col && sector1.row == sector2.row;
}

#define log_point(point) NSLog(@"x: %f, y: %f", point.x, point.y)
#define log_object(obj)  NSLog(@"%@: %@", [obj class], obj)
#define log_sector(sec)  NSLog(@"row: %d, col: %d", sec.row, sec.col);
